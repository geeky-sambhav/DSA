class Solution {
  public:
  string solve(Node* root,map<string,int>&m){
      if(root==NULL){
          return "$";
      }
      string s="";
      if(root->left==NULL && root->right==NULL){
          s="$"+to_string(root->data);
          return s;
      }
      s=s+to_string(root->data);
      s=s+solve(root->left,m);
      s=s+solve(root->right,m);
      m[s]++;
      return s;
  }
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    int dupSub(Node *root) {
       if(root==NULL) {
           return 0;
       }
       map<string,int>m;
       m.clear();
       solve(root,m);
       for (auto i:m){
           if(i.second>1){
               return 1;
           }
           
       }
       return 0;
    }
};